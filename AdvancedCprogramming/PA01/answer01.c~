
#include "answer01.h"

// NOTE: You are NOT to use the strings library on this assignment,
// as stated in the README.

// DO NOT BEGIN WORKING ON THIS FILE UNTIL YOU HAVE COMPLETELY AND
// THOROUGHLY READ THE README FILE!!!

int arraySum(int * array, int len)
{
  
  int sum=0;
  int i=0;
  
  for(i=0; i < len ; i++)
    {
      sum = sum + array[i];
    }
   
    return sum;
}

int arrayCountNegative(int * array, int len)
{
  int negative = 0;
  int j;
  
  for(j=0; j < len; j++)
    {
      if(array[j] < 0)
	{
	  negative++;
	}
    }
      
    return negative;
}

int arrayIsIncreasing(int * array, int len)
{   
  int inc = 0;
  int x;

  for(x=0; x < len; x++)
    {
      if((array[x] < array[x+1]) || (array[x] == array[x+1]))
	{
	  inc = 1;
	}
      else 
	{
	  inc = 0;
	}
    }         

  return inc;
}

int arrayIndexRFind(int needle, const int * haystack, int len)
{
  int i;
  int index;
 
  for(i=0; i < len; i++)
    {
      if(haystack[i] == needle)
	{
	  index = i;
	}
      else
	{
	  return -1;
	}
    }

  return index;

}

int arrayFindSmallest(int * array, int len)
{
  int smallest =array[0];
  int i;
  
  for(i = 0; i<len; i++)
    {
      if(len==0)
	{
	  smallest = 0;
	}
        else if(array[i]<smallest)
	{
	  smallest = array[i];
	}
    }  

   
     return smallest;
}

size_t my_strlen(const char * str)
{
  int length = 0;
 
  while (str[length] != '\0')
    {
      length++;
    }
  
   
    return length;
}

char * my_strchr(const char * str, int ch)
{
  int i =0;
  int count=0;
  
  int length = my_strlen(str);

  if (ch == '\0')
    {
      return (char *)(str + length);  
    }
  
  if (length == 0)
    {
      return "null";
    }  
  
  for(i=0; i < length; i++)
    {
      if(str[i] == ch)
	{
      	  count = i;
	  break;
     	}
      
    }
 
  //printf("\nthe position is %d\n", count);

  return (char*) str + count;
}

char * my_strstr(const char * haystack, const char * needle)
{
  int i;
  int j;
  int flag = 0;
  
  if((haystack == NULL) || (needle == NULL))
    {
      //printf("nigga\n");
      return NULL;
    }
   
  if (needle[0] == '\0')//error here
    {
      // printf("nigga2\n");
      return (char*)haystack;
    }
  
  for (i=0; haystack[i] != '\0'; i++)
    {
      if (haystack[i] == needle[0])
	{
	  for(j=i; ; j++)
	    {
	      if(needle[j-i] == '\0')
		{
		  flag = 1;
		  break;
		}
	      if(haystack[j] == needle[j-i])
		{
		  continue;
		}
	      else
		{
		  break;
		}
	    }
	}
      if (flag == 1)
	{
	  break;
	}    
    }

  if (flag)
    {
      return (char *)(haystack + i);
    }
  else
    {
    return NULL;
    }
}

char * my_strcpy(char * dest, const char * src)
{
  
    return NULL;
}

char * my_strcat(char * dest, const char * src)
{
    return NULL;
}

int my_isspace(int ch)
{
    return -1;
}

int my_atoi(const char * str)
{
    return -1;
}

